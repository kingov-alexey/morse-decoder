const MORSE_TABLE = {
  '.-': 'a',
  '-...': 'b',
  '-.-.': 'c',
  '-..': 'd',
  '.': 'e',
  '..-.': 'f',
  '--.': 'g',
  '....': 'h',
  '..': 'i',
  '.---': 'j',
  '-.-': 'k',
  '.-..': 'l',
  '--': 'm',
  '-.': 'n',
  '---': 'o',
  '.--.': 'p',
  '--.-': 'q',
  '.-.': 'r',
  '...': 's',
  '-': 't',
  '..-': 'u',
  '...-': 'v',
  '.--': 'w',
  '-..-': 'x',
  '-.--': 'y',
  '--..': 'z',
  '.----': '1',
  '..---': '2',
  '...--': '3',
  '....-': '4',
  '.....': '5',
  '-....': '6',
  '--...': '7',
  '---..': '8',
  '----.': '9',
  '-----': '0',
};

//задача: из входящей закодированной строки,
//вернуть раскодированную строку
// в соответсвии с словарем (объетом MORSE_TABLE)

//Последовательность нолей и едениц конвертировать в точки и тире
//точки и тире конвертировать в результирующею строку
//Если встречается последовательность ********** значит пробел

//Пример разбора символов из 1 порции 10 символов

//0010101010
//'....': 'h',

//0000000010
//'.': 'e',

//0010111010
//'.-..': 'l',

function decode(expr) {
  console.log('Приходит строка expr: ', expr);

  // ******************** АЛГОРИТМ РЕШЕНИЯ ********************
  // * +++ Готовлю необходимые переменные
  let result = ''; // итоговая результирующая строка
  let binaryArr = []; // массив для работы с порциями по 10
  let morseChar = ''; // строка для записи одного символа в морзе

  // * +++ Входную строку конвертирую в массив элементов порциями по 10 штук
  for (let i = 0; i < expr.length; i += 10) {
    binaryArr.push(expr.substr(i, 10));
  }

  //* +++ Начинаю пробежку по всем элементам разделенного массива
  binaryArr.forEach((element, index) => {
    // * +++ Если встречаю ********** сразу в результирую строку инкрементирую пробел
    if (element === '**********') {
      result += ' ';
    } else {
      // * +++ Каждый элемент читаю справо налево, шаг чтения в два символа
      console.log('сейчас в работе элемент ', element);
      for (i = 10; i > 0; i = i - 2) {
        let iGet = element.substr(i - 2, 2);
        console.log('iGet ', iGet);
        // * +++ Если сравниваемый шаг 10 - в ПРЕрезульт записываем точку
        if (iGet == 10) {
          morseChar += '.';
        }
        // * +++ Если сравниваемый шаг 11 - в ПРЕрузульт записываем тире
        if (iGet == 11) {
          morseChar += '-';
        }
        // * +++ Если сравниваемый шаг 00 = останавливать декодирования элемента
        if (iGet == 00) {
          break;
        }
      }
      console.log(morseChar);
      // * +++ сравниваю с ключем объекта словаря и инкрементирую рузульт его значеним объекта

      //***** одна допущенная ошибка при рассмотрении ТЗ и проектирования алгоритма решения
      //***** привела к необходимости использовать split('').reverse().join('')
      //***** ЕЩЕ РАЗ, СМОТРИ ВНИМАТЕЛЬНО ТЗ!!!! */

      let simNow = MORSE_TABLE[morseChar.split('').reverse().join('')];
      console.log('дкодированный символ: ', simNow);
      result += simNow;

      morseChar = '';
    }
  });

  console.log('смотрю что я возвращаю', result);
  return result;
}

module.exports = {
  decode,
};
